// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Sqlite;
using Microsoft.EntityFrameworkCore.SqlServer;
using System.Configuration;

namespace DENTAL_WPF.Models;

public partial class DENTAL_Context : DbContext
{
    private int provider { get; set; }
    public DENTAL_Context(DbContextOptions<DENTAL_Context> options, int num = 0)
        : base(options) => provider = num;

    public DENTAL_Context(int num = 0) => provider = num;
    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<DentalClinic> DentalClinics { get; set; }

    public virtual DbSet<Dentist> Dentists { get; set; }

    public virtual DbSet<License> Licenses { get; set; }

    public virtual DbSet<Speciality> Specialities { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
        });

        modelBuilder.Entity<DentalClinic>(entity =>
        {
            entity.ToTable("Dental_clinics");

            entity.HasIndex(e => e.LicenseId, "IX_Dental_clinics_LicenseID");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LicenseId).HasColumnName("LicenseID");

            entity.HasOne(d => d.License).WithMany(p => p.DentalClinics).HasForeignKey(d => d.LicenseId);
        });

        modelBuilder.Entity<Dentist>(entity =>
        {
            entity.HasIndex(e => e.CategoryId, "IX_Dentists_CategoryID");

            entity.HasIndex(e => e.DentalClinicId, "IX_Dentists_Dental_clinicID");

            entity.HasIndex(e => e.SpecialityId, "IX_Dentists_SpecialityID");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.DentalClinicId).HasColumnName("Dental_clinicID");
            entity.Property(e => e.SpecialityId).HasColumnName("SpecialityID");

            entity.HasOne(d => d.Category).WithMany(p => p.Dentists).HasForeignKey(d => d.CategoryId);

            entity.HasOne(d => d.DentalClinic).WithMany(p => p.Dentists).HasForeignKey(d => d.DentalClinicId);

            entity.HasOne(d => d.Speciality).WithMany(p => p.Dentists).HasForeignKey(d => d.SpecialityId);
        });

        modelBuilder.Entity<License>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IssuingCompany).HasColumnName("Issuing_company");
        });

        modelBuilder.Entity<Speciality>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
        });

        OnModelCreatingPartial(modelBuilder);
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        switch (provider)
        {
            case 0:
                optionsBuilder.UseSqlite(ConfigurationManager.ConnectionStrings["DENTAL_SQLite"].ToString());
                break;
            case 1:
                optionsBuilder.UseSqlServer(ConfigurationManager.ConnectionStrings["DENTAL_First"].ToString());
                break;
        }
    }
    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}